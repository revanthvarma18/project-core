title- 3 code

Title 3-
//Accuracy analysis of principal component analysis algorithm over seam craving algorithm in celestial cloudscapes through picpluse magic.//


import os
import imageio
import numpy as np
from skimage import color
from skimage.transform import resize
from sklearn.decomposition import PCA
from skimage import util

input_folder = r'D:\project core\original data sets'
output_folder_pca = r'D:\project core\reduced_output_pca'
output_folder_seam = r'D:\project core\reduced_output_seam'
target_size = (2296, 1724)  # Target size for resized images

# Ensure the output directories exist, create them if not
os.makedirs(output_folder_pca, exist_ok=True)
os.makedirs(output_folder_seam, exist_ok=True)

def load_images(file_paths):
    return np.array([imageio.imread(path) for path in file_paths])

def flatten_images(images):
    return images.reshape(images.shape[0], -1)

def reduce_dimensionality_pca(data, n_components):
    model = PCA(n_components=n_components)
    reduced_data = model.fit_transform(data)
    reconstructed_data = model.inverse_transform(reduced_data)
    return reconstructed_data

def seam_carving(image, target_size):
    gradient = util.img_as_float(color.rgb2gray(image))
    energy = np.abs(np.gradient(gradient)[0]) + np.abs(np.gradient(gradient)[1])

    for _ in range(image.shape[1] - target_size[1]):
        # Find the seam with the lowest energy
        seam = find_seam(energy)

        # Remove the seam from the image
        rows, cols, _ = image.shape
        mask = np.ones((rows, cols), dtype=np.bool)
        mask[np.arange(rows), seam] = False

        image = image[mask].reshape((rows, cols - 1, 3))
        energy = energy[mask].reshape((rows, cols - 1))

    return image

def find_seam(energy):
    dp = np.zeros_like(energy)
    dp[0] = energy[0]

    for i in range(1, energy.shape[0]):
        dp[i] = energy[i] + np.minimum.reduce([dp[i - 1, max(0, j - 1):min(energy.shape[1], j + 2)] for j in range(energy.shape[1])])

    seam = np.argmin(dp[-1])
    return seam

def evaluate_accuracy(original_data, reconstructed_data):
    mse = np.mean(np.square(original_data - reconstructed_data))
    return mse

# Process each image in the input folder
for filename in os.listdir(input_folder):
    if filename.endswith('.jpg') or filename.endswith('.png'):  # Add more file extensions if needed
        # Load the original image
        image_path = os.path.join(input_folder, filename)
        original_image = imageio.imread(image_path)

        # Resize the original image to the target size
        resized_original = resize(original_image, target_size, mode='reflect', anti_aliasing=True)

        # Flatten the resized image for PCA
        flattened_resized = flatten_images(resized_original)

        # Reduce dimensionality using PCA
        reconstructed_pca = reduce_dimensionality_pca(flattened_resized, n_components=50)  # Adjust components

        # Save the PCA result
        output_path_pca = os.path.join(output_folder_pca, filename)
        imageio.imsave(output_path_pca, reconstructed_pca.reshape(resized_original.shape))

        # Perform seam carving
        seam_carved_image = seam_carving(resized_original, target_size)

        # Save the seam carving result
        output_path_seam = os.path.join(output_folder_seam, filename)
        imageio.imsave(output_path_seam, seam_carved_image)

        # Evaluate and print the accuracy
        mse_pca = evaluate_accuracy(flattened_resized, reconstructed_pca.flatten())
        mse_seam = evaluate_accuracy(resized_original, seam_carved_image / 255.0)  # Normalize seam carving result

        print(f'Mean Squared Error (PCA) for {filename}: {mse_pca}')
        print(f'Mean Squared Error (Seam Carving) for {filename}: {mse_seam}')
